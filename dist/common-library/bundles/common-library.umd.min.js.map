{"version":3,"sources":["ng://common-library/lib/common-library.service.ts","ng://common-library/lib/common-library.component.ts","ng://common-library/lib/component/template-fields/template-fields.component.ts","ng://common-library/lib/component/ck-editor/enums.model.ts","ng://common-library/lib/component/ck-editor/ck-editor.component.ts","ng://common-library/lib/common-library.module.ts"],"names":["CommonLibraryService","Injectable","args","providedIn","CommonLibraryComponent","prototype","ngOnInit","Component","selector","template","TemplateFieldsComponent","formBuilder","this","tabItems","emailTemplates","createForm","changeTemplate","value","idLocaleData","split","templateId","Number","templateLocale","selectedTemplate","filter","obj","locale","console","log","emailForm","group","toList","fromAddress","ccList","bccList","subject","emailBody","onBehalfOf","FormBuilder","Input","CUSTOM_EVENTS","MAIN_COMPONENT","UPDATE_SESSION_INTERUPT","CkEditorComponent","eventManager","autoFocus","editorId","ngAfterViewInit","initCkEditor","getOffsetHeight","frmFieldElement","document","querySelector","frmSaveElement","sendEventElement","frmFieldHeight","offsetHeight","frmSaveHeight","sendEventHeight","getEditorData","ckeditorInstance","getData","onResize","event","resizeEditor","_this","CKEDITOR","replace","startupFocus","autoParagraph","fillEmptyBlocks","enterMode","ENTER_BR","forceEnterMode","ignoreEmptyParagraph","resize_enabled","allowedContent","removePlugins","height","disableNativeSpellChecker","extraPlugins","uploadUrl","filebrowserImageUploadUrl","fontSize_sizes","toolbarGroups","getToolbarGroups","removeButtons","removeOtherToolbars","removeDialogTabs","image_previewText","on","setData","editorValue","resetUndo","e","broadcast","name","content","evt","fileLoader","data","formData","FormData","xhr","open","append","file","fileName","apiToken","setRequestHeader","send","stop","response","responseText","message","cancel","responseData","JSON","parse","url","groups","resize","encapsulation","ViewEncapsulation","None","JhiEventManager","ViewChild","HostListener","CommonLibraryModule","NgModule","declarations","imports","CommonModule","TabViewModule","TranslateModule","FormsModule","ReactiveFormsModule","exports","providers","provide","JhiLanguageService","useClass"],"mappings":"wiBAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAAC,UAAAC,SAAA,iCAbDC,EAAAA,UAASL,KAAA,CAAC,CACTM,SAAU,qBACVC,SAAU,iGAcZL,EAlBA,GCWAM,EAAA,WAyGI,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,EANXC,KAAAC,SAAkB,GAIlBD,KAAAE,eAAwB,GAqCrC,OAhCIJ,EAAAL,UAAAC,SAAA,WACIM,KAAKG,cAQTL,EAAAL,UAAAW,eAAA,SAAeC,OACLC,EAAeD,EAAME,MAAM,KAC3BC,EAAaC,OAAOH,EAAa,IACjCI,EAAiBJ,EAAa,GAC9BK,EAAmBX,KAAKE,eAAeU,OAAM,SAACC,GAAO,OAAAA,EAAIL,aAAeA,GAAcK,EAAIC,SAAWJ,IAAgB,GAC3HK,QAAQC,IAAIL,IAMRb,EAAAL,UAAAU,WAAR,WACIH,KAAKiB,UAAYjB,KAAKD,YAAYmB,MAAM,CACpCJ,OAAQ,GACRK,OAAQ,GACRC,YAAa,GACbC,OAAQ,GACRC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,WAAY,0BAzIvB9B,EAAAA,UAASL,KAAA,CAAC,CACPM,SAAU,sBACVC,SAAU,ukLAPM6B,EAAAA,iDAwGfC,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,8BACAA,EAAAA,SAqCL7B,EA5IA,GCNY8B,EAAa,CACrBC,eAAc,iBACdC,wBAAuB,2BCK3BC,EAAA,WAsBI,SAAAA,EACYC,GAAAhC,KAAAgC,aAAAA,EAXHhC,KAAAiC,WAAY,EACZjC,KAAAkC,SAAW,eAwMxB,OAxLIH,EAAAtC,UAAA0C,gBAAA,WACInC,KAAKoC,gBAQTL,EAAAtC,UAAA4C,gBAAA,eAEUC,EAAgCC,SAASC,cAAc,2BACvDC,EAA+BF,SAASC,cAAc,yBACtDE,EAAiCH,SAASC,cAAc,eACxDG,EAAiBL,EAAkBA,EAAgBM,aAAe,EAClEC,EAAgBJ,EAAiBA,EAAeG,aAAe,EAC/DE,EAAkBJ,EAAmBA,EAAiBE,aAAe,EAC3E,OAAOE,GAAmBH,GAAkBE,EAAgBC,EAAkBH,EAAiBE,EAPxE,GAOyG,GAQpId,EAAAtC,UAAAsD,cAAA,WACI,OAAO/C,KAAKgD,iBAAiBC,WAOjClB,EAAAtC,UAAAyD,SADA,SACSC,GACLnD,KAAKoD,gBAMDrB,EAAAtC,UAAA2C,aAAR,WAAA,IAAAiB,EAAArD,KACIA,KAAKgD,iBAAmBM,SAASC,QAAQvD,KAAKkC,SAAU,CACpDsB,aAAcxD,KAAKiC,UACnBwB,eAAe,EACfC,iBAAiB,EACjBC,UAAWL,SAASM,SACpBC,gBAAgB,EAChBC,sBAAsB,EACtBC,gBAAgB,EAChBC,gBAAgB,EAChBC,cAAe,eACfC,OAAQ,QACRC,2BAA2B,EAC3BC,aAAc,cACdC,UAAW,qBACXC,0BAA2B,qBAC3BC,eACI,8HACJC,cAAexE,KAAKyE,mBACpBC,cAAe1E,KAAK2E,sBACpBC,iBAAkB,oEAClBC,kBAAmB,MAGvB7E,KAAKgD,iBAAiB8B,GAAG,gBAAe,WACpCzB,EAAKL,iBAAiB+B,QAAQ1B,EAAK2B,YAAW,WAC1C3B,EAAKL,iBAAiBiC,gBAI9BjF,KAAKgD,iBAAiB8B,GAAG,SAAQ,SAAEI,GAC/B7B,EAAKrB,aAAamD,UAAU,CAAEC,KAAMxD,EAAcC,eAAgBwD,QAASzD,EAAcE,4BAG7F9B,KAAKgD,iBAAiB8B,GAAG,SAAQ,WAC7BzB,EAAKD,iBAGTpD,KAAKgD,iBAAiB8B,GAAG,oBAAmB,SAAEQ,OACpCC,EAAaD,EAAIE,KAAKD,WACtBE,EAAW,IAAIC,SACfC,EAAMJ,EAAWI,IACvBA,EAAIC,KAAK,OAAQL,EAAWlB,WAAW,GACvCoB,EAASI,OAAO,OAAQN,EAAWO,KAAMP,EAAWQ,UAChD1C,EAAK2C,UACLL,EAAIM,iBAAiB,gBAAiB,UAAY5C,EAAK2C,UAE3DL,EAAIO,KAAKT,GACTH,EAAIa,SAGRnG,KAAKgD,iBAAiB8B,GAAG,qBAAoB,SAAEQ,GAC3CA,EAAIa,WACEX,EAAOF,EAAIE,KAEbY,EADMZ,EAAKD,WAAWI,IACPU,aAAa9F,MAAM,KAEtC,GAAI6F,EAAS,GACTZ,EAAKc,QAAUF,EAAS,GACxBd,EAAIiB,aACD,KACGC,EAAeC,KAAKC,MAAMN,EAAS,IACzCZ,EAAKO,SAAWS,EAAaT,SAC7BP,EAAKmB,IAAMH,EAAaG,QAQ5B5E,EAAAtC,UAAAgF,iBAAR,WACI,MAAO,CACH,CACIW,KAAM,WACNwB,OAAQ,CAAC,YAAa,OAAQ,WAAY,aAE9C,CACIxB,KAAM,YACNwB,OAAQ,CAAC,YAAa,SAE1B,CACIxB,KAAM,UACNwB,OAAQ,CAAC,OAAQ,eAAgB,YAErC,CACIxB,KAAM,QACNwB,OAAQ,CAAC,UAEb,CACIxB,KAAM,SACNwB,OAAQ,CAAC,WAEb,CACIxB,KAAM,cACNwB,OAAQ,CAAC,cAAe,YAE5B,CACIxB,KAAM,YACNwB,OAAQ,CAAC,OAAQ,SAAU,SAAU,QAAS,OAAQ,cAE1D,CACIxB,KAAM,QACNwB,OAAQ,CAAC,UAEb,CACIxB,KAAM,SACNwB,OAAQ,CAAC,WAEb,CACIxB,KAAM,SACNwB,OAAQ,CAAC,WAEb,CACIxB,KAAM,QACNwB,OAAQ,CAAC,UAEb,CACIxB,KAAM,SACNwB,OAAQ,CAAC,WAEb,CACIxB,KAAM,QACNwB,OAAQ,CAAC,YAQb7E,EAAAtC,UAAAkF,oBAAR,WACI,MAAO,kUAMH5C,EAAAtC,UAAA2D,aAAR,eACUc,EAASlE,KAAKqC,kBAChBrC,KAAKgD,kBAA6B,IAATkB,GACzBlE,KAAKgD,iBAAiB6D,OAAO,OAAQ3C,wBAlNhDvE,EAAAA,UAASL,KAAA,CAAC,CACPM,SAAU,gBACVC,SAAU,wGAGViH,cAAeC,EAAAA,kBAAkBC,ylBAb5BC,EAAAA,wDAkBJtF,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,+BACAuF,EAAAA,UAAS5H,KAAA,CAAC,qCA+CV6H,EAAAA,aAAY7H,KAAA,CAAC,gBAAiB,CAAC,cAwJpCyC,EArNA,GCZAqF,EAAA,WAiBI,SAAAA,KAEJ,2BATCC,EAAAA,SAAQ/H,KAAA,CAAC,CACNgI,aAAc,CAAC9H,EAAwBuC,EAAmBjC,GAC1DyH,QAAS,CAACC,EAAAA,aAAcC,EAAAA,cAAeC,EAAAA,gBAAiBC,EAAAA,YAAaC,EAAAA,qBACrEC,QAAS,CAACrI,EAAwBuC,EAAmBjC,GACrDgI,UAAW,CAAC,CAAEC,QAASC,EAAAA,mBAAoBC,SAAUD,EAAAA,+DAKzDZ,EAnBA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonLibraryService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'jhi-common-library',\n  template: `\n    <p>\n      common-library works!\n    </p>\n  `,\n  styles: []\n})\nexport class CommonLibraryComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/**\n * @(#)template-fields.component.ts Mar 11, 2020 Copyright 2020,Oversight Systems, Inc. Proprietary and confidential\n * @author adeole\n */\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n/**\n * This component class is used to handle event related operations.\n */\n@Component({\n    selector: 'jhi-template-fields',\n    template: `\n    <div class=\"col-md-12 mt-3 p-0\">\n    <p-tabView>\n        <p-tabPanel [header]=\"tabItems[0]?.header\" [selected]=\"true\">\n        <form [formGroup]=\"emailForm\" autocomplete=\"off\">\n            <div id=\"frm-fields\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"form-group row mb-1\">\n                            <label class=\"col-sm-1 col-form-label\" for=\"frm-tmplt\"\n                                id=\"lbl-template\">{{'global.form.labels.template' | translate}}</label>\n                            <div class=\"col-sm-5\">\n                                <select #templateDropdown class=\"form-control form-control-sm\" id=\"frm-tmplt\"\n                                    (change)=\"changeTemplate(templateDropdown.value)\" formControlName=\"locale\">\n                                    <option *ngFor=\" let template of emailTemplates\"\n                                        [value]=\"template?.templateId+',' +template?.locale\"\n                                        [title]=\"template?.templateName\">\n                                        {{template.templateName}}\n                                    </option>\n                                </select>\n                            </div>\n                            <span class=\"col-cstm-1 pr-0\"></span>\n                            <label *ngIf=\"emailForm.get('onBehalfOf').value\" class=\"col-sm-1 col-form-label pl-0\"\n                                for=\"frm-tmplt\" id=\"lbl-sender\">{{'global.form.labels.sender' | translate}}</label>\n                            <div *ngIf=\"emailForm.get('onBehalfOf').value\" class=\"col-sm-4 pl-0 mt-1\" id=\"val-sender\">\n                                {{emailForm.get('onBehalfOf').value}}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"form-group row mb-1\">\n                            <label for=\"frm-to\" class=\"col-sm-1 col-form-label\"\n                                id=\"lbl-to\">{{'global.form.labels.to' | translate}}</label>\n                            <div class=\"col-sm-5\">\n                                <input formControlName=\"toList\" type=\"text\" class=\"form-control form-control-sm\"\n                                    id=\"frm-to\">\n                            </div>\n                            <span class=\"col-cstm-1 icon-info-bg icon_info pr-0\">\n                                <span class=\"tooltipTxt tooltipTop\"\n                                    id=\"lbl-description\">{{'sendEvent.messageDesc' | translate}}</span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"form-group row mb-1\">\n                            <label for=\"frm-from\" class=\"col-sm-1 col-form-label\"\n                                id=\"lbl-to\">{{'global.form.labels.from' | translate}}</label>\n                            <div class=\"col-sm-5\">\n                                <input formControlName=\"fromAddress\" type=\"text\" class=\"form-control form-control-sm\"\n                                    id=\"frm-from\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"form-group row mb-1\">\n                            <label for=\"frm-cc\" class=\"col-sm-1 col-form-label\"\n                                id=\"lbl-cc\">{{'global.form.labels.cc' | translate}}</label>\n                            <div class=\"col-sm-5\">\n                                <input formControlName=\"ccList\" type=\"text\" class=\"form-control form-control-sm\"\n                                    id=\"frm-cc\">\n                            </div>\n                            <span class=\"col-cstm-1 pr-0\"></span>\n                            <label for=\"frm-bcc\" class=\"col-sm-1 col-form-label pl-0\"\n                                id=\"lbl-bcc\">{{'global.form.labels.bcc' | translate}}</label>\n                            <div class=\"col-sm-4 pl-0\">\n                                <input formControlName=\"bccList\" type=\"text\" class=\"form-control form-control-sm\"\n                                    id=\"frm-bcc\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                </div>\n            </div>\n        </form>\n            <jhi-ck-editor #ckEditor [apiToken]=\"apiToken\" [autoFocus]=\"autoFocus\" [editorValue]=\"editorData\"\n                [editorId]=\"'email-editor'\">\n            </jhi-ck-editor>\n        </p-tabPanel>\n        <p-tabPanel [header]=\"tabItems[1]?.header\">\n            Content 2\n        </p-tabPanel>\n        <p-tabPanel [header]=\"tabItems[2]?.header\">\n            Content 3\n        </p-tabPanel>\n</p-tabView>\n</div>`,\n    styleUrls: ['./template-field-style.scss']\n})\nexport class TemplateFieldsComponent implements OnInit {\n    @Input() tabItems: any[] = [];\n    @Input() editorData: any;\n    @Input() autoFocus: boolean;\n    @Input() apiToken: string;\n    @Input() emailTemplates: any[] = [];\n    emailForm: FormGroup;\n    constructor(private formBuilder: FormBuilder) {\n\n    }\n    ngOnInit() {\n        this.createForm();\n    }\n\n    /**\n     * To change the Email template\n     *\n     * @param value: string\n     */\n    changeTemplate(value: string) {\n        const idLocaleData = value.split(',');\n        const templateId = Number(idLocaleData[0]);\n        const templateLocale = idLocaleData[1];\n        const selectedTemplate = this.emailTemplates.filter(obj => obj.templateId === templateId && obj.locale === templateLocale)[0];\n        console.log(selectedTemplate);\n    }\n\n    /**\n     * To create a form for Email Template\n     */\n    private createForm() {\n        this.emailForm = this.formBuilder.group({\n            locale: '',\n            toList: '',\n            fromAddress: '',\n            ccList: '',\n            bccList: '',\n            subject: '',\n            emailBody: '',\n            onBehalfOf: ''\n        });\n    }\n}\n","/**\n * @(#)enums.model.ts Mar 13, 2020 Copyright 2020,Oversight Systems, Inc. Proprietary and confidential\n *\n * @author adeole\n */\nexport enum CUSTOM_EVENTS {\n    MAIN_COMPONENT = 'MAIN_COMPONENT',\n    UPDATE_SESSION_INTERUPT = 'UPDATE_SESSION_INTERUPT',\n}\n","/**\n * @(#)ck-editor.component.ts Mar 13, 2020 Copyright 2020, Oversight Systems, Inc. Proprietary and confidential\n */\nimport { AfterViewInit, Component, ElementRef, HostListener, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { JhiEventManager } from 'ng-jhipster';\nimport { CUSTOM_EVENTS } from './enums.model';\ndeclare const CKEDITOR: any;\n\n/**\n * This component class handles the event message template related operations.\n * @author adeole\n */\n@Component({\n    selector: 'jhi-ck-editor',\n    template: `<div #editorContainer>\n        <textarea name=\"email-editor\" [id]=\"editorId\"></textarea>\n    </div>`,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./ck-editor.component.scss']\n})\nexport class CkEditorComponent implements AfterViewInit {\n    ckeditorInstance: any;\n    @Input() editorValue: string;\n    @Input() apiToken: string;\n    @Input() autoFocus = false;\n    @Input() editorId = 'email-editor';\n    @ViewChild('editorContainer') editorContainer: ElementRef<HTMLElement>;\n\n    /**\n     * This constructor inject the services.\n     *\n     * @param wbLocalStorageService WBLocalStorageService\n     * @param sessionStorage SessionStorageService\n     */\n    constructor(\n        private eventManager: JhiEventManager\n    ) { }\n\n    /**\n     * This default life-cycle method initilize the ck-editor.\n     */\n    ngAfterViewInit() {\n        this.initCkEditor();\n    }\n\n    /**\n     * The method is used to get the element height.\n     *\n     * @returns height number\n     */\n    getOffsetHeight() {\n        const defaultPadding = 30;\n        const frmFieldElement = (<HTMLElement>document.querySelector('#send-event #frm-fields'));\n        const frmSaveElement = (<HTMLElement>document.querySelector('#send-event #frm-save'));\n        const sendEventElement = (<HTMLElement>document.querySelector('#send-event'));\n        const frmFieldHeight = frmFieldElement ? frmFieldElement.offsetHeight : 0;\n        const frmSaveHeight = frmSaveElement ? frmSaveElement.offsetHeight : 0;\n        const sendEventHeight = sendEventElement ? sendEventElement.offsetHeight : 0;\n        return sendEventHeight && frmFieldHeight && frmSaveHeight ? sendEventHeight - frmFieldHeight - frmSaveHeight - defaultPadding : 0;\n    }\n\n    /**\n     * The method is used to get the editor data\n     *\n     * @returns editorData any\n     */\n    getEditorData() {\n        return this.ckeditorInstance.getData();\n    }\n\n    /**\n     * This event method is used to handle window resize.\n     */\n    @HostListener('window:resize', ['$event'])\n    onResize(event: any) {\n        this.resizeEditor();\n    }\n\n    /**\n     * To initialise the ckeditor\n     */\n    private initCkEditor() {\n        this.ckeditorInstance = CKEDITOR.replace(this.editorId, {\n            startupFocus: this.autoFocus,\n            autoParagraph: false,\n            fillEmptyBlocks: false,\n            enterMode: CKEDITOR.ENTER_BR,\n            forceEnterMode: false,\n            ignoreEmptyParagraph: false,\n            resize_enabled: false,\n            allowedContent: true,\n            removePlugins: 'elementspath',\n            height: '290px',\n            disableNativeSpellChecker: false,\n            extraPlugins: 'uploadimage',\n            uploadUrl: 'api/template/image',\n            filebrowserImageUploadUrl: 'api/template/image',\n            fontSize_sizes:\n                '8/8pt;9/9pt;10/10pt;11/11pt;12/12pt;14/14pt;16/16pt;18/18pt;20/20pt;22/22pt;24/24pt;26/26pt;28/28pt;36/36pt;48/48pt;72/72pt',\n            toolbarGroups: this.getToolbarGroups(),\n            removeButtons: this.removeOtherToolbars(),\n            removeDialogTabs: 'link:upload;image:Upload;image:Link;image:advanced;table:advanced',\n            image_previewText: ' '\n        });\n\n        this.ckeditorInstance.on('instanceReady', () => {\n            this.ckeditorInstance.setData(this.editorValue, () => {\n                this.ckeditorInstance.resetUndo();\n            });\n        });\n\n        this.ckeditorInstance.on('change', e => {\n            this.eventManager.broadcast({ name: CUSTOM_EVENTS.MAIN_COMPONENT, content: CUSTOM_EVENTS.UPDATE_SESSION_INTERUPT });\n        });\n\n        this.ckeditorInstance.on('loaded', () => {\n            this.resizeEditor();\n        });\n\n        this.ckeditorInstance.on('fileUploadRequest', evt => {\n            const fileLoader = evt.data.fileLoader;\n            const formData = new FormData();\n            const xhr = fileLoader.xhr;\n            xhr.open('POST', fileLoader.uploadUrl, true);\n            formData.append('file', fileLoader.file, fileLoader.fileName);\n            if (this.apiToken) {\n                xhr.setRequestHeader('Authorization', 'Bearer ' + this.apiToken);\n            }\n            xhr.send(formData);\n            evt.stop();\n        });\n\n        this.ckeditorInstance.on('fileUploadResponse', evt => {\n            evt.stop();\n            const data = evt.data,\n                xhr = data.fileLoader.xhr,\n                response = xhr.responseText.split('|');\n\n            if (response[1]) {\n                data.message = response[1];\n                evt.cancel();\n            } else {\n                const responseData = JSON.parse(response[0]);\n                data.fileName = responseData.fileName;\n                data.url = responseData.url;\n            }\n        });\n    }\n\n    /**\n     * Return toolbar group options for the ckeditor\n     */\n    private getToolbarGroups() {\n        return [\n            {\n                name: 'document',\n                groups: ['selection', 'mode', 'document', 'doctools']\n            },\n            {\n                name: 'clipboard',\n                groups: ['clipboard', 'undo']\n            },\n            {\n                name: 'editing',\n                groups: ['find', 'spellchecker', 'editing']\n            },\n            {\n                name: 'forms',\n                groups: ['forms']\n            },\n            {\n                name: 'insert',\n                groups: ['insert']\n            },\n            {\n                name: 'basicstyles',\n                groups: ['basicstyles', 'cleanup']\n            },\n            {\n                name: 'paragraph',\n                groups: ['list', 'indent', 'blocks', 'align', 'bidi', 'paragraph']\n            },\n            {\n                name: 'links',\n                groups: ['links']\n            },\n            {\n                name: 'styles',\n                groups: ['styles']\n            },\n            {\n                name: 'colors',\n                groups: ['colors']\n            },\n            {\n                name: 'tools',\n                groups: ['tools']\n            },\n            {\n                name: 'others',\n                groups: ['others']\n            },\n            {\n                name: 'about',\n                groups: ['about']\n            }\n        ];\n    }\n\n    /**\n     * return un-used toolbar options to remove it from ckeditor.\n     */\n    private removeOtherToolbars() {\n        return 'Preview,Source,SelectAll,Cut,Copy,Paste,PasteText,PasteFromWord,Language,Flash,Smiley,SpecialChar,PageBreak,Iframe,Anchor,PasteText,Save,NewPage,Print,Templates,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Scayt,CopyFormatting,RemoveFormat,Maximize,ShowBlocks,About,CreateDiv,Blockquote';\n    }\n\n    /**\n     * This method is used to resize the editor height according to window size.\n     */\n    private resizeEditor() {\n        const height = this.getOffsetHeight();\n        if (this.ckeditorInstance && height > 200) {\n            this.ckeditorInstance.resize('100%', height);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabViewModule } from 'primeng/tabview';\nimport { CommonLibraryComponent } from './common-library.component';\nimport { CkEditorComponent } from './component/ck-editor/ck-editor.component';\nimport { TemplateFieldsComponent } from './component/template-fields/template-fields.component';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n    declarations: [CommonLibraryComponent, CkEditorComponent, TemplateFieldsComponent],\n    imports: [CommonModule, TabViewModule, TranslateModule, FormsModule, ReactiveFormsModule],\n    exports: [CommonLibraryComponent, CkEditorComponent, TemplateFieldsComponent],\n    providers: [{ provide: JhiLanguageService, useClass: JhiLanguageService }]\n})\nexport class CommonLibraryModule {\n    constructor() {\n    }\n}\n"]}